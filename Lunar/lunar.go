package Lunar

// { * 自公元前 850 年开始的农历闰月数，-849~2100，移植自中国日历类}
var CN_LEAP_NUMBER_LIST = [2949]int{
	0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8,
	9, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15,
	15, 16, 16, 16, 17, 17, 17, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21,
	22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 26, 26, 26, 27, 27, 27,
	28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34,
	34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 40, 40,
	40, 41, 41, 41, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 46, 46, 46,
	47, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 51, 51, 52, 52, 52, 53,
	53, 53, 54, 54, 54, 55, 55, 56, 56, 56, 56, 57, 57, 57, 58, 58, 59,
	59, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 64, 64, 65, 65,
	65, 65, 66, 66, 66, 67, 67, 68, 68, 69, 69, 69, 69, 70, 71, 71, 71,
	71, 71, 71, 72, 72, 73, 73, 74, 74, 74, 75, 75, 75, 75, 76, 76, 77,
	77, 77, 77, 78, 79, 79, 79, 79, 79, 80, 80, 80, 81, 82, 82, 82, 83,
	83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 88, 88,
	89, 89, 90, 90, 91, 91, 91, 92, 92, 93, 93, 94, 94, 94, 94, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 99, 99, 100, 100, 100, 101, 101,
	101, 102, 102, 102, 103, 103, 104, 104, 104, 105, 105, 105, 106, 106,
	106, 107, 107, 107, 108, 108, 109, 109, 109, 110, 110, 111, 111, 111,
	112, 112, 112, 113, 113, 114, 114, 114, 115, 115, 116, 116, 116, 117,
	117, 117, 117, 118, 118, 119, 119, 119, 120, 120, 121, 121, 121, 122,
	122, 122, 123, 123, 124, 124, 124, 124, 125, 125, 126, 126, 126, 126,
	127, 127, 128, 128, 129, 129, 130, 130, 130, 130, 131, 131, 132, 132,
	132, 133, 133, 133, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137,
	137, 138, 138, 139, 139, 139, 140, 140, 141, 141, 141, 142, 142, 142,
	143, 143, 143, 144, 144, 144, 145, 145, 146, 146, 146, 147, 147, 147,
	148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152, 152, 153,
	153, 153, 154, 154, 154, 155, 155, 156, 156, 156, 157, 157, 157, 158,
	158, 158, 159, 159, 160, 160, 160, 161, 161, 161, 162, 162, 163, 163,
	163, 164, 164, 164, 165, 165, 165, 166, 166, 167, 167, 167, 168, 168,
	168, 169, 169, 170, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173,
	174, 174, 174, 175, 175, 175, 176, 176, 177, 177, 177, 178, 178, 178,
	179, 179, 179, 180, 180, 181, 181, 181, 182, 182, 182, 183, 183, 184,
	184, 184, 185, 185, 185, 186, 186, 186, 187, 187, 188, 188, 188, 189,
	189, 189, 190, 190, 191, 191, 191, 192, 192, 192, 193, 193, 193, 194,
	194, 195, 195, 195, 196, 196, 196, 197, 197, 198, 198, 198, 199, 199,
	199, 200, 200, 200, 201, 201, 202, 202, 202, 203, 203, 203, 204, 204,
	205, 205, 205, 206, 206, 206, 207, 207, 207, 208, 208, 209, 209, 209,
	210, 210, 210, 211, 211, 212, 212, 212, 213, 213, 213, 214, 214, 214,
	214, 214, 215, 215, 215, 216, 216, 216, 217, 217, 218, 218, 218, 219,
	219, 219, 220, 220, 221, 221, 221, 222, 222, 222, 223, 223, 223, 224,
	224, 225, 225, 225, 226, 226, 226, 227, 227, 228, 228, 228, 229, 229,
	229, 230, 230, 230, 231, 231, 232, 232, 232, 233, 233, 233, 234, 234,
	235, 235, 235, 236, 236, 236, 237, 237, 237, 238, 238, 239, 239, 239,
	240, 240, 240, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 244,
	245, 245, 246, 246, 246, 247, 247, 247, 248, 248, 249, 249, 249, 250,
	250, 250, 251, 251, 252, 252, 252, 253, 253, 253, 254, 254, 254, 255,
	255, 256, 256, 256, 257, 257, 257, 258, 258, 259, 259, 259, 260, 260,
	260, 261, 261, 261, 262, 262, 263, 263, 263, 264, 264, 264, 265, 265,
	266, 266, 266, 267, 267, 267, 268, 268, 268, 269, 269, 270, 270, 270,
	271, 271, 271, 272, 272, 273, 273, 273, 274, 274, 274, 275, 275, 276,
	276, 276, 277, 277, 277, 278, 278, 278, 279, 279, 280, 280, 280, 281,
	281, 281, 282, 282, 283, 283, 283, 284, 284, 284, 285, 285, 285, 286,
	286, 287, 287, 287, 288, 288, 288, 289, 289, 290, 290, 290, 291, 291,
	291, 292, 292, 292, 293, 293, 294, 294, 294, 295, 295, 295, 296, 296,
	297, 297, 297, 298, 298, 298, 299, 299, 299, 300, 300, 301, 301, 301,
	302, 302, 302, 303, 303, 304, 304, 304, 305, 305, 305, 306, 306, 306,
	307, 307, 308, 308, 308, 309, 309, 309, 310, 310, 311, 311, 312, 312,
	312, 313, 313, 313, 314, 314, 315, 315, 315, 316, 316, 316, 317, 317,
	317, 318, 318, 319, 319, 319, 320, 320, 320, 321, 321, 322, 322, 322,
	323, 323, 323, 324, 324, 325, 325, 325, 326, 326, 326, 327, 327, 327,
	328, 328, 329, 329, 329, 330, 330, 330, 331, 331, 332, 332, 332, 333,
	333, 333, 334, 334, 334, 335, 335, 336, 336, 336, 337, 337, 337, 338,
	338, 339, 339, 339, 340, 340, 340, 341, 341, 341, 342, 342, 343, 343,
	343, 344, 344, 344, 345, 345, 346, 346, 346, 347, 347, 347, 348, 348,
	348, 349, 349, 350, 350, 350, 351, 351, 351, 352, 352, 353, 353, 353,
	354, 354, 354, 355, 355, 355, 356, 356, 357, 357, 357, 358, 358, 358,
	359, 359, 360, 360, 360, 361, 361, 361, 362, 362, 362, 363, 363, 364,
	364, 364, 365, 365, 365, 366, 366, 367, 367, 367, 368, 368, 368, 369,
	369, 369, 370, 370, 371, 371, 371, 372, 372, 372, 373, 373, 374, 374,
	374, 375, 375, 375, 376, 376, 376, 377, 377, 378, 378, 378, 379, 379,
	379, 380, 380, 381, 381, 381, 382, 382, 382, 383, 383, 383, 384, 384,
	385, 385, 385, 386, 386, 386, 387, 387, 388, 388, 388, 389, 389, 389,
	390, 390, 390, 391, 391, 392, 392, 392, 393, 393, 393, 394, 394, 395,
	395, 395, 396, 396, 396, 397, 397, 397, 398, 398, 399, 399, 399, 400,
	400, 400, 401, 401, 402, 402, 402, 403, 403, 403, 404, 404, 404, 405,
	405, 406, 406, 406, 407, 407, 407, 408, 408, 409, 409, 409, 410, 410,
	410, 411, 411, 411, 412, 412, 413, 413, 413, 414, 414, 414, 415, 415,
	416, 416, 416, 417, 417, 417, 418, 418, 418, 419, 419, 420, 420, 420,
	421, 421, 421, 422, 422, 423, 423, 423, 424, 424, 424, 425, 425, 425,
	426, 426, 427, 427, 427, 428, 428, 428, 429, 429, 430, 430, 430, 431,
	431, 431, 432, 432, 432, 433, 433, 434, 434, 434, 435, 435, 435, 436,
	436, 437, 437, 437, 438, 438, 438, 439, 439, 439, 440, 440, 441, 441,
	441, 442, 442, 442, 443, 443, 444, 444, 444, 445, 445, 445, 446, 446,
	446, 447, 447, 448, 448, 448, 449, 449, 449, 450, 450, 451, 451, 451,
	452, 452, 452, 453, 453, 453, 454, 454, 455, 455, 455, 456, 456, 456,
	457, 457, 458, 458, 458, 459, 459, 459, 460, 460, 460, 461, 461, 462,
	462, 462, 463, 463, 463, 464, 464, 465, 465, 465, 466, 466, 466, 467,
	467, 467, 468, 468, 469, 469, 469, 470, 470, 470, 471, 471, 472, 472,
	472, 473, 473, 473, 474, 474, 474, 475, 475, 475, 476, 476, 477, 477,
	477, 478, 478, 478, 479, 479, 480, 480, 480, 481, 481, 481, 482, 482,
	482, 483, 483, 484, 484, 484, 485, 485, 485, 486, 486, 487, 487, 487,
	488, 488, 488, 489, 489, 489, 490, 490, 491, 491, 491, 492, 492, 492,
	493, 493, 494, 494, 494, 495, 495, 495, 496, 496, 496, 497, 497, 498,
	498, 498, 499, 499, 499, 500, 500, 501, 501, 501, 502, 502, 502, 503,
	503, 503, 504, 504, 505, 505, 505, 506, 506, 506, 507, 507, 508, 508,
	508, 509, 509, 509, 510, 510, 510, 511, 511, 512, 512, 512, 513, 513,
	513, 514, 514, 515, 515, 515, 516, 516, 516, 517, 517, 517, 518, 518,
	519, 519, 519, 520, 520, 520, 521, 521, 522, 522, 522, 523, 523, 523,
	524, 524, 524, 525, 525, 526, 526, 526, 527, 527, 527, 528, 528, 529,
	529, 529, 530, 530, 530, 531, 531, 531, 532, 532, 533, 533, 533, 534,
	534, 534, 535, 535, 536, 536, 536, 537, 537, 537, 538, 538, 538, 539,
	539, 540, 540, 540, 541, 541, 541, 542, 542, 543, 543, 543, 544, 544,
	544, 545, 545, 545, 546, 546, 547, 547, 547, 548, 548, 548, 549, 549,
	550, 550, 550, 551, 551, 551, 552, 552, 552, 553, 553, 554, 554, 554,
	555, 555, 555, 556, 556, 557, 557, 557, 558, 558, 558, 559, 559, 559,
	560, 560, 561, 561, 561, 562, 562, 562, 563, 563, 563, 564, 564, 565,
	565, 565, 566, 566, 566, 567, 567, 568, 568, 568, 569, 569, 569, 570,
	570, 570, 571, 571, 572, 572, 572, 573, 573, 573, 574, 574, 575, 575,
	575, 576, 576, 576, 577, 577, 578, 578, 578, 579, 579, 579, 580, 580,
	580, 581, 581, 582, 582, 582, 583, 583, 583, 584, 584, 584, 585, 585,
	586, 586, 586, 587, 587, 587, 588, 588, 589, 589, 589, 590, 590, 590,
	591, 591, 591, 592, 592, 593, 593, 593, 594, 594, 594, 595, 595, 596,
	596, 596, 597, 597, 597, 598, 598, 598, 599, 599, 600, 600, 600, 601,
	601, 601, 602, 602, 603, 603, 603, 604, 604, 604, 605, 605, 605, 606,
	606, 607, 607, 607, 608, 608, 608, 609, 609, 610, 610, 610, 611, 611,
	611, 612, 612, 612, 613, 613, 614, 614, 614, 615, 615, 615, 616, 616,
	617, 617, 617, 618, 618, 618, 619, 619, 619, 620, 620, 621, 621, 621,
	622, 622, 622, 623, 623, 624, 624, 624, 625, 625, 625, 626, 626, 626,
	627, 627, 628, 628, 628, 629, 629, 629, 630, 630, 631, 631, 631, 632,
	632, 632, 633, 633, 633, 634, 634, 635, 635, 635, 636, 636, 636, 637,
	637, 638, 638, 638, 639, 639, 639, 640, 640, 640, 641, 641, 642, 642,
	642, 643, 643, 643, 644, 644, 645, 645, 645, 646, 646, 646, 647, 647,
	647, 648, 648, 649, 649, 649, 650, 650, 650, 651, 651, 652, 652, 652,
	653, 653, 653, 654, 654, 654, 655, 655, 656, 656, 656, 657, 657, 657,
	658, 658, 659, 659, 659, 660, 660, 660, 661, 661, 661, 662, 662, 663,
	663, 663, 664, 664, 664, 665, 665, 666, 666, 666, 667, 667, 667, 668,
	668, 668, 669, 669, 670, 670, 670, 671, 671, 671, 672, 672, 673, 673,
	673, 674, 674, 674, 675, 675, 675, 676, 676, 677, 677, 677, 678, 678,
	678, 679, 679, 680, 680, 680, 681, 681, 681, 682, 682, 682, 683, 683,
	684, 684, 684, 685, 685, 685, 686, 686, 687, 687, 687, 688, 688, 688,
	689, 689, 689, 690, 690, 691, 691, 691, 692, 692, 692, 693, 693, 694,
	694, 694, 695, 695, 695, 696, 696, 696, 697, 697, 698, 698, 698, 699,
	699, 699, 700, 700, 701, 701, 701, 702, 702, 702, 703, 703, 703, 704,
	704, 705, 705, 705, 706, 706, 706, 707, 707, 707, 708, 708, 709, 709,
	709, 710, 710, 710, 711, 711, 712, 712, 712, 713, 713, 713, 714, 714,
	714, 715, 715, 716, 716, 716, 717, 717, 717, 718, 718, 719, 719, 719,
	720, 720, 720, 721, 721, 721, 722, 722, 723, 723, 723, 724, 724, 724,
	725, 725, 726, 726, 726, 727, 727, 727, 728, 728, 728, 729, 729, 730,
	730, 730, 731, 731, 731, 732, 732, 733, 733, 733, 734, 734, 734, 735,
	735, 736, 736, 736, 737, 737, 737, 738, 738, 738, 739, 739, 740, 740,
	740, 741, 741, 741, 742, 742, 742, 743, 743, 744, 744, 744, 745, 745,
	745, 746, 746, 747, 747, 747, 748, 748, 748, 749, 749, 749, 750, 750,
	751, 751, 751, 752, 752, 752, 754, 754, 755, 755, 755, 756, 756, 756,
	757, 757, 757, 758, 758, 759, 759, 759, 760, 760, 760, 761, 761, 762,
	762, 762, 763, 763, 763, 764, 764, 764, 765, 765, 766, 766, 766, 767,
	767, 767, 768, 768, 769, 769, 769, 770, 770, 770, 771, 771, 771, 772,
	772, 773, 773, 773, 774, 774, 774, 775, 775, 776, 776, 776, 777, 777,
	777, 778, 778, 778, 779, 779, 780, 780, 780, 781, 781, 781, 782, 782,
	783, 783, 783, 784, 784, 784, 785, 785, 785, 786, 786, 787, 787, 787,
	788, 788, 788, 789, 789, 790, 790, 790, 791, 791, 791, 792, 792, 792,
	793, 793, 794, 794, 794, 795, 795, 795, 796, 796, 796, 797, 797, 798,
	798, 798, 799, 799, 799, 800, 800, 801, 801, 801, 802, 802, 802, 803,
	803, 804, 804, 804, 805, 805, 805, 806, 806, 806, 807, 807, 808, 808,
	808, 809, 809, 809, 810, 810, 810, 811, 811, 812, 812, 812, 813, 813,
	813, 814, 814, 815, 815, 815, 816, 816, 816, 817, 817, 818, 818, 818,
	819, 819, 819, 820, 820, 820, 821, 821, 822, 822, 822, 823, 823, 823,
	824, 824, 825, 825, 825, 826, 826, 826, 827, 827, 827, 828, 828, 829,
	829, 829, 830, 830, 830, 831, 831, 832, 832, 832, 833, 833, 833, 834,
	834, 834, 835, 835, 836, 836, 836, 837, 837, 837, 838, 838, 839, 839,
	839, 840, 840, 840, 841, 841, 841, 842, 842, 843, 843, 843, 844, 844,
	844, 845, 845, 845, 846, 846, 847, 847, 847, 848, 848, 848, 849, 849,
	850, 850, 850, 851, 851, 851, 852, 852, 852, 853, 853, 854, 854, 854,
	855, 855, 855, 856, 856, 857, 857, 857, 858, 858, 858, 859, 859, 859,
	860, 860, 861, 861, 861, 862, 862, 862, 863, 863, 864, 864, 863, 864,
	864, 864, 865, 865, 865, 866, 866, 867, 867, 867, 868, 868, 868, 869,
	869, 870, 870, 870, 871, 871, 871, 872, 872, 873, 873, 873, 874, 874,
	874, 875, 875, 875, 876, 876, 877, 877, 877, 878, 878, 878, 879, 879,
	879, 880, 880, 881, 881, 881, 882, 882, 882, 883, 883, 884, 884, 884,
	885, 885, 885, 886, 886, 886, 887, 887, 888, 888, 888, 889, 889, 889,
	890, 890, 891, 891, 891, 892, 892, 892, 893, 893, 893, 894, 894, 895,
	895, 895, 896, 896, 896, 897, 897, 898, 898, 898, 899, 899, 899, 900,
	900, 900, 901, 901, 902, 902, 902, 903, 903, 903, 904, 904, 905, 905,
	905, 906, 906, 906, 907, 907, 907, 908, 908, 909, 909, 909, 910, 910,
	910, 911, 911, 912, 912, 912, 913, 913, 913, 914, 914, 914, 915, 915,
	916, 916, 916, 917, 917, 917, 918, 918, 919, 919, 919, 920, 920, 920,
	921, 921, 921, 922, 922, 923, 923, 923, 924, 924, 924, 925, 925, 925,
	926, 926, 927, 927, 927, 928, 928, 928, 929, 929, 930, 930, 930, 931,
	931, 931, 932, 932, 932, 933, 933, 934, 934, 934, 935, 935, 935, 936,
	936, 937, 937, 937, 938, 938, 938, 939, 939, 939, 940, 940, 941, 941,
	941, 942, 942, 942, 943, 943, 944, 944, 944, 945, 945, 945, 946, 946,
	946, 947, 947, 948, 948, 948, 949, 949, 949, 950, 950, 951, 951, 951,
	952, 952, 952, 953, 953, 953, 954, 954, 955, 955, 955, 956, 956, 956,
	957, 957, 958, 958, 958, 959, 959, 959, 960, 960, 960, 961, 961, 962,
	962, 962, 963, 963, 963, 964, 964, 965, 965, 965, 966, 966, 966, 967,
	967, 967, 968, 968, 969, 969, 969, 970, 970, 970, 971, 971, 971, 972,
	972, 973, 973, 973, 974, 974, 974, 975, 975, 976, 976, 976, 977, 977,
	977, 978, 978, 978, 979, 979, 980, 980, 980, 981, 981, 981, 982, 982,
	983, 983, 983, 984, 984, 984, 985, 985, 986, 986, 986, 987, 987, 987,
	988, 988, 988, 989, 989, 990, 990, 990, 991, 991, 991, 992, 992, 993,
	993, 993, 994, 994, 994, 995, 995, 995, 996, 996, 997, 997, 997, 998,
	998, 998, 999, 999, 1000, 1000, 1000, 1001, 1001, 1001, 1002, 1002,
	1002, 1003, 1003, 1004, 1004, 1004, 1005, 1005, 1005, 1006, 1006,
	1006, 1007, 1007, 1008, 1008, 1008, 1009, 1009, 1009, 1010, 1010,
	1011, 1011, 1011, 1012, 1012, 1012, 1013, 1013, 1013, 1014, 1014,
	1015, 1015, 1015, 1016, 1016, 1016, 1017, 1017, 1018, 1018, 1018,
	1019, 1019, 1019, 1020, 1020, 1020, 1021, 1021, 1022, 1022, 1022,
	1023, 1023, 1023, 1024, 1024, 1025, 1025, 1025, 1026, 1026, 1026,
	1027, 1027, 1027, 1028, 1028, 1029, 1029, 1029, 1030, 1030, 1030,
	1031, 1031, 1032, 1032, 1032, 1033, 1033, 1033, 1034, 1034, 1034,
	1035, 1035, 1036, 1036, 1036, 1037, 1037, 1037, 1038, 1038, 1039,
	1039, 1039, 1040, 1040, 1040, 1041, 1041, 1042, 1042, 1042, 1043,
	1043, 1043, 1044, 1044, 1044, 1045, 1045, 1046, 1046, 1046, 1047,
	1047, 1047, 1048, 1048, 1048, 1049, 1049, 1050, 1050, 1050, 1051,
	1051, 1051, 1052, 1052, 1053, 1053, 1053, 1054, 1054, 1054, 1055,
	1055, 1055, 1056, 1056, 1057, 1057, 1057, 1058, 1058, 1058, 1059,
	1059, 1060, 1060, 1060, 1061, 1061, 1061, 1062, 1062, 1062, 1063,
	1063, 1064, 1064, 1064, 1065, 1065, 1065, 1066, 1066, 1067, 1067,
	1067, 1068, 1068, 1068, 1069, 1069, 1069, 1070, 1070, 1071, 1071,
	1071, 1072, 1072, 1072, 1073, 1073, 1074, 1074, 1074, 1075, 1075,
	1075, 1076, 1076, 1076, 1077, 1077, 1078, 1078, 1078, 1079, 1079,
	1079, 1080, 1080, 1081, 1081, 1081, 1082, 1082, 1082, 1083, 1083,
	1083, 1084, 1084}

// { * 自公元前 850 年开始的农历闰月信息 -849~2100，移植自中国日历类}
// var SCnLeapMonth string = "0c0080050010a0070030c0080050010a0070030c0080050020a0070030c0080050020a" + "0070030c0090050020a0070030c0090050020a0060030c0060030c00900600c0c0060c" + "00c00c00c0c000600c0c0006090303030006000c00c060c0006c00000c0c0c00600030" + "30006c00009009c0090c00c009000300030906030030c0c00060c00090c0060600c003" + "0060c00c003006009060030c0060060c0090900c00090c0090c00c0060300060600030" + "30c0c00030c0060030c0090060030c0090300c0080050020a0060030c0080050020b00" + "70030c0090050010a0070030b0090060020a0070040c0080050020a0060030c0080050" + "020b0070030c0090050010a0070030b0090060020a0070040c0080050020a0060030c0" + "080050020b0070030c0090050000c00900909009009090090090090900900909009009" + "0090900900909009009009090090090900900900909009009090090090900900900909" + "00900909009009009090090090900900900909009009090060030c0090050010a00700" + "30b008005001090070040c0080050020a0060030c0090040010a0060030c0090050010" + "a0070030b0080050010a008005001090050020a0060030c0080040010a0060030c0090" + "050010a0070030b0080050010a0070030b008005001090070040c0080050020a006003" + "0c0080040010a0060030c0090050010a0070030b008005001090070040c0080050020a" + "0060030c0080040010a0060030c0090050010a0060030c0090050010a0070030b00800" + "5001090070040c0080050020a0060030c0080040010a0070030b0080050010a0070040" + "c0080050020a0060030c0080040010a0070030c0090050010a0070030b0080050020a0" + "060030c0080040010a0060030c0090050050020a0060030c0090050010b0070030c009" + "0050010a0070040c0080040020a0060030c0080050020a0060030c0090050010a00700" + "30b0080040020a0060040c0090050020b0070030c00a0050010a0070030b0090050020" + "a0070030c0080040020a0060030c0090050010a0070030c0090050030b007005001090" + "050020a007004001090060020c0070050c0090060030b0080040020a0060030b008004" + "0010a0060030b0080050010a0050040c0080050010a0060030c0080050010b0070030c" + "007005001090070030b0070040020a0060030c0080040020a0070030b0090050010a00" + "60040c0080050020a0060040c0080050010b0070030c007005001090070030c0080050" + "020a0070030c0090050020a0070030c0090050020a0060040c0090050020a0060040c0" + "090050010b0070030c0080050030b007004001090060020c008004002090060020a008" + "004001090050030b0080040020a0060040b0080040c00a0060020b0070050010900600" + "30b0070050020a0060020c008004002090070030c008005002090070040c0080040020" + "a0060040b0090050010a0060030b0080050020a0060040c0080050010b007003001080" + "05001090070030c0080050020a007003001090050030a0070030b0090050020a006004" + "0c0090050030b0070040c0090050010c0070040c0080060020b00700400a090060020b" + "007003002090060020a005004001090050030b007004001090050040c0080040c00a00" + "60020c007005001090060030b0070050020a0060020c008004002090060030b0080040" + "02090060030b0080040020a0060040b0080040010b0060030b0070050010a006004002" + "0700500308006004003070050030700600400307005003080060040030700500409006" + "0040030700500409006005002070050030a00600500307005004002060040020600500" + "30020600400307005004090060040030700500408007005003080050040a0060050030" + "7005004002060050030800500400206005002070050040020600500307006004002070" + "050030800600400307005004080060040a006005003080050040020700500409006004" + "002060050030b006005002070050030800600400307005004080060040030700500408" + "0060040020"
var CN_LEAP_MONTH_LIST = [2949]int{
	0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10,
	0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 6, 0, 0, 12, 0, 12, 0, 0, 6, 0, 12,
	0, 0, 12, 0, 0, 12, 0, 0, 12, 0, 12, 0, 0, 0, 6, 0, 0, 12, 0, 12, 0, 0, 0, 6, 0, 9, 0, 3, 0, 3, 0, 3, 0, 0, 0, 6, 0, 0, 0, 12, 0, 0, 12, 0, 6, 0, 12, 0, 0, 0, 6, 12, 0, 0, 0, 0, 0, 12, 0, 12, 0, 12, 0, 0, 6, 0, 0, 0, 3, 0,
	3, 0, 0, 0, 6, 12, 0, 0, 0, 0, 9, 0, 0, 9, 12, 0, 0, 9, 0, 12, 0, 0, 12, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 3, 0, 9, 0, 6, 0, 3, 0, 0, 3, 0, 12, 0, 12, 0, 0, 0, 6, 0, 12, 0, 0, 0, 9, 0, 12, 0, 0, 6, 0, 6, 0, 0, 12, 0, 0, 3,
	0, 0, 6, 0, 12, 0, 0, 12, 0, 0, 3, 0, 0, 6, 0, 0, 9, 0, 6, 0, 0, 3, 0, 12, 0, 0, 6, 0, 0, 6, 0, 12, 0, 0, 9, 0, 9, 0, 0, 12, 0, 0, 0, 9, 0, 12, 0, 0, 9, 0, 12, 0, 0, 12, 0, 0, 6, 0, 3, 0, 0, 0, 6, 0, 6, 0, 0, 0, 3, 0,
	3, 0, 12, 0, 12, 0, 0, 0, 3, 0, 12, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 3, 0, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 11, 0, 0,
	7, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 9, 0, 0, 6, 0, 0, 2, 0, 10, 0, 0, 7, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0,
	0, 2, 0, 11, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 9, 0, 0, 6, 0, 0, 2, 0, 10, 0, 0, 7, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0,
	0, 8, 0, 0, 5, 0, 0, 2, 0, 11, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 0, 0, 12, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9,
	0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9,
	0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 0, 9, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0,
	3, 0, 11, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 9, 0, 0, 7, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 4, 0, 0, 1, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0,
	10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 9, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 1, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0,
	0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 9, 0, 0, 7, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3,
	0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 1, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 9, 0, 0, 7, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10,
	0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 1, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0,
	5, 0, 0, 1, 0, 9, 0, 0, 7, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 4, 0,
	12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0,
	0, 6, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 1, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 11, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 9,
	0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0,
	3, 0, 11, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 4, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 2, 0, 11, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 10, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 9, 0, 0, 5, 0, 0, 2, 0,
	10, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 3, 0, 11, 0, 0, 7, 0, 0, 5, 0, 0, 1, 0, 9, 0,
	0, 5, 0, 0, 2, 0, 10, 0, 0, 7, 0, 0, 4, 0, 0, 1, 0, 9, 0, 0, 6, 0, 0, 2, 0, 12, 0, 0, 7, 0, 0, 5, 0, 12, 0, 0, 9, 0, 0, 6, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 4,
	0, 0, 1, 0, 10, 0, 0, 6, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 5, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 11, 0, 0, 7, 0, 0, 3, 0, 12,
	0, 0, 7, 0, 0, 5, 0, 0, 1, 0, 9, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 7, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0,
	6, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 11, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 7, 0, 0, 5, 0, 0, 1, 0, 9, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0,
	0, 2, 0, 10, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 4, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 4, 0, 12, 0,
	0, 9, 0, 0, 5, 0, 0, 1, 0, 11, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 3, 0, 11, 0, 0, 7, 0, 0, 4, 0, 0, 1, 0, 9, 0, 0, 6, 0, 0, 2, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0, 9, 0, 0, 6, 0, 0, 2, 0, 10, 0, 0, 8,
	0, 0, 4, 0, 0, 1, 0, 9, 0, 0, 5, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 4, 0, 11, 0, 0, 8, 0, 0, 4, 0, 12, 0, 0, 10, 0, 0, 6, 0, 0, 2, 0, 11, 0, 0, 7, 0, 0, 5, 0, 0, 1, 0, 9, 0, 0, 6, 0, 0,
	3, 0, 11, 0, 0, 7, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 2, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0, 9, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 9, 0, 0, 7, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0,
	10, 0, 0, 6, 0, 0, 4, 0, 11, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 6, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 1, 0, 11, 0, 0, 7, 0, 0, 3, 0, 0, 1, 0, 8, 0,
	0, 5, 0, 0, 1, 0, 9, 0, 0, 7, 0, 0, 3, 0, 12, 0, 0, 8, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 7, 0, 0, 3, 0, 0, 1, 0, 9, 0, 0, 5, 0, 0, 3, 0, 10, 0, 0, 7, 0, 0, 3, 0, 11, 0, 0, 9, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 4,
	0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 3, 0, 11, 0, 0, 7, 0, 0, 4, 0, 12, 0, 0, 9, 0, 0, 5, 0, 0, 1, 0, 12, 0, 0, 7, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 6, 0, 0, 2, 0, 11, 0, 0, 7, 0, 0, 4, 0, 0, 10, 0, 9, 0, 0, 6, 0, 0, 2, 0, 11,
	0, 0, 7, 0, 0, 3, 0, 0, 2, 0, 9, 0, 0, 6, 0, 0, 2, 0, 10, 0, 0, 5, 0, 0, 4, 0, 0, 1, 0, 9, 0, 0, 5, 0, 0, 3, 0, 11, 0, 0, 7, 0, 0, 4, 0, 0, 1, 0, 9, 0, 0, 5, 0, 0, 4, 0, 12, 0, 0, 8, 0, 0, 4, 0, 12, 0, 0, 10, 0, 0,
	6, 0, 0, 2, 0, 12, 0, 0, 7, 0, 0, 5, 0, 0, 1, 0, 9, 0, 0, 6, 0, 0, 3, 0, 11, 0, 0, 7, 0, 0, 5, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 2, 0, 12, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0, 9, 0, 0, 6, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 4, 0,
	0, 2, 0, 9, 0, 0, 6, 0, 0, 3, 0, 11, 0, 0, 8, 0, 0, 4, 0, 0, 2, 0, 10, 0, 0, 6, 0, 0, 4, 0, 11, 0, 0, 8, 0, 0, 4, 0, 0, 1, 0, 11, 0, 0, 6, 0, 0, 3, 0, 11, 0, 0, 7, 0, 0, 5, 0, 0, 1, 0, 10, 0, 0, 6, 0, 0, 4, 0, 0, 2,
	0, 7, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 6, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 5, 0, 0, 3, 0, 7, 0, 0, 6, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 6, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 5, 0, 0, 4, 0, 9, 0, 0, 6,
	0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 5, 0, 0, 4, 0, 9, 0, 0, 6, 0, 0, 5, 0, 0, 2, 0, 7, 0, 0, 5, 0, 0, 3, 0, 10, 0, 0, 6, 0, 0, 5, 0, 0, 3, 0, 7, 0, 0, 5, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 5, 0, 0,
	3, 0, 0, 2, 0, 6, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 5, 0, 0, 4, 0, 9, 0, 0, 6, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 5, 0, 0, 4, 0, 8, 0, 0, 7, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 5, 0, 0, 4, 0, 10, 0, 0, 6, 0, 0, 5, 0, 0, 3, 0,
	7, 0, 0, 5, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 5, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 5, 0, 0, 2, 0, 7, 0, 0, 5, 0, 0, 4, 0, 0, 2, 0, 6, 0, 0, 5, 0, 0, 3, 0, 7, 0, 0, 6, 0, 0, 4, 0, 0, 2, 0, 7, 0,
	0, 5, 0, 0, 3, 0, 8, 0, 0, 6, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 5, 0, 0, 4, 0, 8, 0, 0, 6, 0, 0, 4, 0, 10, 0, 0, 6, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 5, 0, 0, 4, 0, 0, 2, 0, 7, 0, 0, 5, 0, 0, 4, 0, 9, 0, 0, 6, 0, 0, 4,
	0, 0, 2, 0, 6, 0, 0, 5, 0, 0, 3, 0, 11, 0, 0, 6, 0, 0, 5, 0, 0, 2, 0, 7, 0, 0, 5, 0, 0, 3, 0, 8, 0, 0, 6, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 5, 0, 0, 4, 0, 8, 0, 0, 6, 0, 0, 4, 0, 0, 3, 0, 7, 0, 0, 5, 0, 0, 4, 0, 8,
	0, 0, 6, 0, 0, 4, 0, 0, 2, 0}

// 移植自中国日历类
func GetLeapNum(nYear int) int {
	if nYear == 0 {
		return 0
	} else if nYear < 0 {
		return CN_LEAP_NUMBER_LIST[nYear+849]
	} else {
		return CN_LEAP_NUMBER_LIST[nYear-1+849]
	}
}

// 移植自中国日历类
func GetLeapMonth(nYear int) int {
	if nYear < 0 {
		return CN_LEAP_MONTH_LIST[nYear+849]
	} else {
		return CN_LEAP_MONTH_LIST[nYear-1+849]
	}
}

// // 获得某农历年的闰月，返回 1~12 对应一月到十二月，返回 0 表示无闰月
// func GetLunarLeapMonth(AYear: int) int{
//     var Result int = GetLeapMonth(AYear)
//     if Result < 0 {
//         return 0
//     }
//     return Result
// }

// // 获得某公历年月日的农历月数
// func GetLunarMonth(AYear, AMonth, ADay: int): Real;
// var
//   LunDay: Real;
//   aEclipsType: TEclipseType;
//   aMoonPhase: TMoonPhase;
//   aTime: Double;
//   LeapMons, NMonth: int;

//   // 小数的求余数
//   func GetRemain(X, W: Real): Real;
//   begin
//     Result := GetTail(X/W) * W;
//   end;

// begin
//   LunDay := GetLunarMoon(AYear, AMonth, ADay, aEclipsType, aMoonPhase, aTime);
//   if aTime <> -1 {
//     LunDay := LunDay + aTime;
//   LunDay := Floor(LunDay - Floor(LunDay / 100) * 100);

//   LeapMons := GetLeapNum(AYear);
//   NMonth := Round((GetEquStandardDays(AYear, AMonth, ADay)
//     - GetEquStandardDays(-849, 1, 21) - LunDay)/ 29.530588) - LeapMons;

//   //历史上的修改月建
//   if AYear <= 240 { Inc(NMonth);
//   if AYear <= 237 { Dec(NMonth);
//   if AYear < 24 { Inc(NMonth);
//   if AYear < 9 { Dec(NMonth);
//   if AYear <= -255 { Inc(NMonth);
//   if AYear <= -256 { Inc(NMonth, 2);
//   if AYear <= -722 { Inc(NMonth);

//   Result := Round(GetRemain(NMonth - 3, 12) + 1);

//   if (Result = GetLeapMonth(AYear - 1)) and (AMonth = 1) and (ADay < LunDay) {
//   begin
//     Result := - Result;    //如果 AYear - 1年末是闰月且该月接到了 AYear 年,则 AYear 年年初也是闰月
//   end
//   else if Result = GetLeapMonth(AYear) {
//   begin
//     // 如果得到的月份数与当年所闰的月相同，比如1612年1月31号。
//     // 上面计算所得的是11月，并且1612年年底有个闰11月，这俩不能混淆
//     if (AMonth in [1, 2]) and (GetLeapMonth(AYear) <> 12) {
//     begin
//       // 粗略判断，如果月份在年初，且今年闰月不是12月，就说明两个月不是一个年的，
//       // 所以不是闰月，修正为普通月。但这个修正可能不是太准确

//       // 比如1984年有闰10月，而1984.1.1的农历月为10，
//       // 但这是从1983年阴历接过来的，所以不是1984年的闰10月
//       Result := Result + 1;
//     end
//     else
//     begin
//       Result := - Result;
//     end;
//   end
//   else
//   begin
//     if (Result < GetLeapMonth(AYear)) or (AMonth < Result) and (GetLeapMonth(AYear) > 0) {
//       Result := Result + 1;  //如果 AYear 年是闰月但当月未过闰月则前面多扣除了本年的闰月，这里应当补偿

//     Result := Round(GetRemain(Result - 1, 12) + 1);
//   end;
// end;

// // 获得某公历年月日的农历年月日和是否闰月的信息
// func GetLunarFromDay(AYear, AMonth, ADay: int;
//   out LunarYear, LunarMonth, LunarDay: int; out IsLeapMonth: Boolean): Boolean;
// var
//   aEclipsType: TEclipseType;
//   aMoonPhase: TMoonPhase;
//   aTime: Double;
// begin
//   Result := False;
//   if (AYear >= -849) and (AYear <= 2100) {
//   begin
//     LunarDay := Floor(GetLunarMoon(AYear, AMonth, ADay, aEclipsType, aMoonPhase, aTime));
//     LunarMonth := Floor(GetLunarMonth(AYear, AMonth, ADay));
//     IsLeapMonth := LunarMonth < 0;
//     if IsLeapMonth {
//       LunarMonth := - LunarMonth;
//     LunarYear := AYear;

//     // 农历在下半年，公历在上半年，则农历应为上一年
//     if (LunarMonth > 6) and (AMonth < 6) {
//       Dec(LunarYear);

//     Result := True;
//   end;
// end;

// // 获得某公历年月日的农历月日和是否闰月的信息
// func GetLunarMonthDayFromDay(AYear, AMonth, ADay: int;
//   out LunarMonth, LunarDay: int; out IsLeapMonth: Boolean): Boolean;
// var
//   aEclipsType: TEclipseType;
//   aMoonPhase: TMoonPhase;
//   aTime: Double;
// begin
//   Result := False;
//   if (AYear >= -849) and (AYear <= 2100) {
//   begin
//     LunarDay := Floor(GetLunarMoon(AYear, AMonth, ADay, aEclipsType, aMoonPhase, aTime));
//     LunarMonth := Floor(GetLunarMonth(AYear, AMonth, ADay));
//     IsLeapMonth := LunarMonth < 0;
//     if IsLeapMonth {
//       LunarMonth := - LunarMonth;
//     Result := True;
//   end;
// end;

// // 获得某农历年月日（加是否闰月）的公历年月日
// // 该函数采用反向二分法查找
// func GetDayFromLunar(ALunarYear, ALunarMonth, ALunarDay: int; IsLeapMonth:
//   Boolean; out AYear, AMonth, ADay: int): Boolean;
// type
//   TLunarSearchDirection = (lsdInvalid, lsdUp, lsdDown);
// var
//   StartYear, StartMonth, StartDay: int;
//   EndYear, EndMonth, EndDay: int;
//   StartDays, EndDays, InterDays: int;
//   TempYear, TempMonth, TempDay: int;
//   TempLunarYear, TempLunarMonth, TempLunarDay, OldTempLunarMonth: int;
//   TempIsLeap, Only2: Boolean;
//   Lsd: TLunarSearchDirection;
//   Count: int;
// begin
//   Result := False;
//   if IsLeapMonth and (GetLunarLeapMonth(ALunarYear) <> ALunarMonth) {
//     Exit; // 该年无此闰月则退出

//   // 初始范围为本公历年一月一日到次年十二月三十一日，这样做的前提是历史上正月初一
//   // 没有落到公历年年前去。如果有这样的情况，可考虑适当扩大搜索范围，比如从
//   // 上一公历年一月一日到次年十二月三十一日，但又可能引发下面对搜索范围判断的错
//   StartYear := ALunarYear;
//   StartMonth := 1;
//   StartDay := 1;
//   StartDays := GetEquStandardDays(StartYear, StartMonth, StartDay);

//   EndYear := ALunarYear + 1;
//   EndMonth := 12;
//   EndDay := 31;
//   EndDays := GetEquStandardDays(EndYear, EndMonth, EndDay);

//   Only2 := False;
//   Lsd := lsdInvalid;
//   TempYear := StartYear;
//   TempLunarYear := StartYear;
//   OldTempLunarMonth := 0;

//   Count := 0;
//   while StartDays < EndDays do
//   begin
//     Inc(Count);
//     if Count > 100 { // 避免陷入死循环
//       Exit;

//     InterDays := (StartDays + EndDays) div 2;
//     if Only2 {
//       Inc(InterDays);

//     if EndDays - StartDays = 1 {
//       Only2 := True;

//     GetDayFromEquStandardDays(InterDays, TempYear, TempMonth, TempDay);
//     GetLunarMonthDayFromDay(TempYear, TempMonth, TempDay, TempLunarMonth,
//       TempLunarDay, TempIsLeap);
//     // 此转换不能直接获取年份，故用下面的判断来获取年份

//     case Lsd of
//       lsdUp:
//         begin
//           // 往未来搜索时如果农历月由大变小了，说明跨了年，年份得加一
//           if TempLunarMonth < OldTempLunarMonth {
//             Inc(TempLunarYear);
//         end;
//       lsdDown:
//         begin
//           // 往过去搜索时如果农历月由小变大了，说明跨了年，年份得减一
//           if TempLunarMonth > OldTempLunarMonth {
//             Dec(TempLunarYear);
//         end;
//     end;

//     case Compare2LunarDay(TempLunarYear, TempLunarMonth, TempLunarDay, TempIsLeap,
//       ALunarYear, ALunarMonth, ALunarDay, IsLeapMonth) of
//       -1:
//         begin
//           StartDays := InterDays;
//           Lsd := lsdUp; // 往未来搜索
//         end;
//       0:
//         begin
//           AYear := TempYear;
//           AMonth := TempMonth;
//           ADay := TempDay;
//           Result := True;
//           Exit;
//         end;
//       1:
//         begin
//           EndDays := InterDays;
//           Lsd := lsdDown; // 往过去搜索
//         end;
//     end;
//     OldTempLunarMonth := TempLunarMonth;
//   end;
// end;
